# -*- coding: utf-8 -*-
"""eggplant-infestation-classification.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1zNaDtKu5FNcWlF_HwAEE5TK4sKHs6LPK

Eggplant Infestation Detection Program
"""

# Install dependencies
!pip install keras tensorflow
!pip install pillow

# Import Libraries
from google.colab import files
import keras
from keras.applications.vgg16 import VGG16
from keras.preprocessing import image
from keras.applications.vgg16 import preprocess_input, decode_predictions
from keras.preprocessing.image import ImageDataGenerator
from keras.models import Model
from keras.layers import Dense
import numpy as np
import os
from google.colab import drive
from PIL import Image
import matplotlib.pyplot as plt

# Create model instance
base_model = VGG16(weights='imagenet', include_top=False)

# Set folder path
folder_path = '/content/drive/MyDrive/EGGPLANT_FILES/resized-imgs'

# Add a new classification layer
x = base_model.output
x = keras.layers.GlobalAveragePooling2D()(x)
x = Dense(256, activation='relu')(x)
predictions = Dense(1, activation='sigmoid')(x)  # Binary classification, so the output should have 1 neuron with sigmoid activation

# Define the modified model
model = Model(inputs=base_model.input, outputs=predictions)

# Freeze the layers of the base model
for layer in base_model.layers:
    layer.trainable = False
    
# Compile the model
model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])

"""Training the Model"""

# Data augmentation and preprocessing
train_datagen = ImageDataGenerator(
    rescale=1.0 / 255,  
    rotation_range=10,  
    width_shift_range=0.1, 
    height_shift_range=0.1, 
    shear_range=0.2, 
    zoom_range=0.2,  
    horizontal_flip=True, 
    fill_mode="nearest"  
)

# Define input image dimensions and batch size
target_size = (224, 224)
batch_size = 32

# Load and augment the training dataset
train_generator = train_datagen.flow_from_directory(
    '/content/drive/MyDrive/EGGPLANT_FILES/pre-processed-datasets',
    target_size=target_size,
    batch_size=batch_size,
    class_mode="binary"
)

# Set the number of training epochs
epochs = 10

# Compile the model
model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])

# Train the model
model.fit(
    train_generator,
    epochs=epochs,
    steps_per_epoch=len(train_generator),
    verbose=1
)

# Set the model path
model_path = '/content/drive/MyDrive/EGGPLANT_FILES/eggplant_infestation_model.h5'

# Save the trained model
model.save(model_path)

# VIsualizing the training process

# Get the training history
history = model.history

# Create subplots with 1 row and 2 columns
fig, axs = plt.subplots(1, 2, figsize=(12, 6))

# Plot the training loss
axs[0].plot(history.history['loss'])
axs[0].set_title('Training Loss')
axs[0].set_xlabel('Epochs')
axs[0].set_ylabel('Loss')

# Plot the training accuracy
axs[1].plot(history.history['accuracy'])
axs[1].set_title('Training Accuracy')
axs[1].set_xlabel('Epochs')
axs[1].set_ylabel('Accuracy')

# Adjust the spacing between subplots
plt.tight_layout()

# Show the plots
plt.show()

"""Processing and Predictions"""

test_folder = '/content/drive/MyDrive/EGGPLANT_FILES/training and testing/test'

# Set the test folder path
test_folder = '/content/drive/MyDrive/EGGPLANT_FILES/training and testing/test'

# Get a list of image files in the test folder
image_files = [f for f in os.listdir(test_folder) if f.endswith('.jpg') or f.endswith('.png')]

# Loop to iterate files in the folder and preprocess
for filename in image_files:
    img_path = os.path.join(test_folder, filename)
    img = Image.open(img_path)
    x = np.array(img)
    x = np.expand_dims(x, axis=0)
    x = preprocess_input(x)

    # Start making predictions
    preds = model.predict(x)

    # Get the predicted class and its probability
    predicted_class = "infested" if preds[0][0] > 0.5 else "non-infested"
    probability = preds[0][0] if predicted_class == "infested" else 1 - preds[0][0]

    # Print the predicted class and its probability
    print(f"Image: {filename}")
    print(f"Class: {predicted_class}, Probability: {probability}")

    # Display the image and predicted class
    plt.imshow(img)
    plt.axis('off')
    plt.title(f"Predicted Class: {predicted_class}\nProbability: {probability}")
    plt.show()